{"version":3,"sources":["components/Cell.jsx","components/Row.jsx","components/Board.jsx","library/isArrayMatching.js","Game.jsx","library/isGameFinished.js","library/isDraw.js","library/restartGrid.js","index.js"],"names":["Cell","onClick","cell","rowIndex","columnIndex","className","type","onChange","Row","row","map","c_index","Board","grid","gameFinished","r_index","isArrayMatching","array","values_array","index","length","cell_id","coordinates","mapCellIdToCoordinates","column","Game","useState","setGrid","current_player","setCurrentPlayer","message","setMessage","game_finished","setGameFinished","game_loaded","setGameLoaded","useLayoutEffect","resetGame","checkGameResult","next_player","game_result","have_rows_finished","i","find","r","have_columns_finished","have_diagonals_finished","has_empty","findIndex","c","isDraw","isGameFinished","row_index","column_index","grid_copy","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acd681b4.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Cell = ({ onClick, cell, rowIndex, columnIndex }) => {\n  return (\n    <div className=\"cell\" onClick={() => onClick(rowIndex, columnIndex)}>\n      {!cell && <input className=\"cell-input\" type=\"checkbox\" onChange={() => onClick(rowIndex, columnIndex)}/>}\n      {cell}\n    </div>\n  );\n};","import React from 'react';\nimport { Cell } from './Cell';\n\nexport const Row = ({ row, rowIndex, onClick }) => {\n  return (\n    <div key={rowIndex} className=\"row\">\n      {row.map((cell, c_index) => {\n        return (\n          <Cell key={c_index} cell={cell} rowIndex={rowIndex} columnIndex={c_index} onClick={onClick} />\n        );\n      })}\n    </div>\n  );\n};","import React from 'react';\nimport { Row } from './Row';\n\nexport const Board = ({ grid, onClick, gameFinished }) => {\n  return (\n    <div className=\"grid-wrapper\">\n      {grid.map((row, r_index) => {\n        return (\n          <Row key={r_index} rowIndex={r_index} row={row} onClick={gameFinished ? () => {} : onClick} />\n        )\n      })}\n    </div>\n  )\n};","export const isArrayMatching = (array, grid) => {\n  let values_array = '';\n\n  for (let index = 0; index < array.length; index++) {\n    const cell_id = array[index];\n    const coordinates = mapCellIdToCoordinates(cell_id);\n    const grid_value = grid[coordinates.row][coordinates.column];\n    values_array += grid_value;\n  }\n\n  if (values_array === 'XXX') return 'XXX';\n  if (values_array === 'OOO') return 'OOO';\n\n  return '';\n};\n\nconst mapCellIdToCoordinates = (cell_id) => {\n  switch (cell_id) {\n    case 0: return { row: 0, column: 0 };\n    case 1: return { row: 0, column: 1 };\n    case 2: return { row: 0, column: 2 };\n    case 3: return { row: 1, column: 0 };\n    case 4: return { row: 1, column: 1 };\n    case 5: return { row: 1, column: 2 };\n    case 6: return { row: 2, column: 0 };\n    case 7: return { row: 2, column: 1 };\n    case 8: return { row: 2, column: 2 };\n    default:\n      break;\n  }\n};","import React, { useLayoutEffect, useState } from 'react';\nimport { Board } from './components';\nimport { restartGrid, isGameFinished } from './library';\nimport './Game.css';\n\nconst Game = () => {\n  const [grid, setGrid] = useState();\n  const [current_player, setCurrentPlayer] = useState('X');\n  const [message, setMessage] = useState();\n  const [game_finished, setGameFinished] = useState(false);\n  const [game_loaded, setGameLoaded] = useState(false);\n\n  useLayoutEffect(() => {\n    resetGame();\n  }, []);\n\n  const handleClick = (row_index, column_index) => {\n    const cell = grid[row_index][column_index];\n    if (cell) return;\n\n    const grid_copy = [...grid];\n    grid_copy[row_index][column_index] = current_player;\n    const next_player = current_player === 'X' ? 'O' : 'X';\n\n    setGrid(grid_copy);\n    setCurrentPlayer(next_player);\n\n    checkGameResult(next_player);\n  };\n\n  const checkGameResult = (next_player) => {\n    const game_result = isGameFinished(grid);\n    if (!game_result) return setMessage(`It's ${next_player} turn`);\n\n    setGameFinished(true);\n\n    if (game_result !== 'draw') {\n      setMessage(`The winner is: ${game_result[0]}`);\n    } else {\n      setMessage(`The game is a draw`);\n    }\n  };\n\n  const resetGame = () => {\n    setGrid(restartGrid());\n    setGameFinished(false);\n    setCurrentPlayer('X');\n    setMessage(`It's X turn`);\n    setGameLoaded(true);\n  };\n\n  return (\n    game_loaded && (\n      <div className=\"wrapper\">\n        <h1>Tic tac toe!</h1>\n        <Board grid={grid} onClick={handleClick} gameFinished={game_finished} />\n        <div className=\"message\">\n          {message}\n        </div>\n        <button className=\"reset-button\" onClick={resetGame}>\n          {game_finished ? 'New game' : 'Reset game'}\n        </button>\n      </div>\n    )\n  );\n}\n\nexport default Game;\n","import { isArrayMatching } from \"./isArrayMatching\";\nimport { isDraw } from \"./isDraw\";\n\nexport const isGameFinished = (grid) => {\n  const rows = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8]\n  ];\n  const columns = [\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8]\n  ];\n  const diagonals = [\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  const have_rows_finished = rows.map(i => isArrayMatching(i, grid)).find(r => r);\n  const have_columns_finished = columns.map(i => isArrayMatching(i, grid)).find(r => r);\n  const have_diagonals_finished = diagonals.map(i => isArrayMatching(i, grid)).find(r => r);\n\n  return have_rows_finished || have_columns_finished || have_diagonals_finished || isDraw(grid);\n};","export const isDraw = (grid) => {\n  let has_empty = false;\n\n  for (let index = 0; index < grid.length; index++) {\n    const row = grid[index];\n    if (row.findIndex(c => c === '') !== -1) {\n      has_empty = true;\n    }\n  }\n\n  return has_empty ? '' : 'draw';\n};\n","export const restartGrid = () => {\n  return [\n    ['', '', ''],\n    ['', '', ''],\n    ['', '', '']\n  ];\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}